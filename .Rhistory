library(nortest)
#Finds critical value of test based on
#50 000 samples of 100 independent observations
normal_crit <- function(test_fun, alpha, N = 50000, n = 100){
X <- replicate(N, rnorm(n, mean = 0, sd = 1))
dim(X) <- c(n, N)
T <- apply(X, 2, test_fun)
test_name <- as.character(substitute(test_fun))
if(test_name == 'sw'){
crit = quantile(T, alpha)
}
else{
crit = quantile(T, 1 - alpha)
}
return(crit)
}
#Kolmogorov_Smirnov test statistic
ks <- function(x){
return(ks.test(x, 'pnorm', mean(x), sd(x))$statistic)
}
#Shapiro-Wilk test statistic
sw <- function(x){
return(shapiro.test(x)$statistic)
}
#Lilliefors test statistic
lillie <- function(x){
return(lillie.test(x)$statistic)
}
#Anderson-Darling test statistic
ad <- function(x){
return(ad.test(x)$statistic)
}
normal_crit(ks, 0.05)
normal_crit(sw, 0.05)
normal_crit(lillie, 0.05)
normal_crit(ad, 0.05)
#Finds critical value of test based on
#50 000 samples of 100 independent observations
normal_crit <- function(test_fun, alpha, N = 50000, n = 100){
X <- replicate(N, rnorm(n, mean = 0, sd = 1))
dim(X) <- c(n, N)
T <- apply(X, 1, test_fun)
test_name <- as.character(substitute(test_fun))
if(test_name == 'sw'){
crit = quantile(T, alpha)
}
else{
crit = quantile(T, 1 - alpha)
}
return(crit)
}
normal_crit(ad, 0.05)
normal_crit(ks, 0.05)
normal_crit(sw, 0.05)
#Finds critical value of test based on
#50 000 samples of 100 independent observations
normal_crit <- function(test_fun, alpha, N = 50000, n = 100){
X <- replicate(N, rnorm(n, mean = 0, sd = 1))
dim(X) <- c(n, N)
T <- apply(X, 2, test_fun)
test_name <- as.character(substitute(test_fun))
if(test_name == 'sw'){
crit = quantile(T, alpha)
}
else{
crit = quantile(T, 1 - alpha)
}
return(crit)
}
#Kolmogorov_Smirnov test statistic
ks <- function(x){
return(ks.test(x, 'pnorm', mean(x), sd(x))$statistic)
}
#Shapiro-Wilk test statistic
sw <- function(x){
return(shapiro.test(x)$statistic)
}
#Lilliefors test statistic
lillie <- function(x){
return(lillie.test(x)$statistic)
}
#Anderson-Darling test statistic
ad <- function(x){
return(ad.test(x)$statistic)
}
#Tu muszę jeszcze popracować
find_power <- function(test_fun, Z, alpha, M = 10000){
crit <- normal_crit(test_fun, alpha)
test_name <- as.character(substitute(test_fun))
d <- 0
for(i in 1:M){
D <- test_fun(Z)
if(test_name == 'sw'){
if(D < crit){
d <- d + 1
}
}
else{
if(D > crit){
d <- d + 1
}
}
}
p <- d
return(p)
}
find_power(sw, rbeta(50, 2, 2), 0.05)
rgamma(100, shape = 1, scale = 7)
#Uniform
u_sample <- function(n, a, b){
return(runif(n, a, b))
}
#Beta
beta_sample <- function(n, a, b){
return(rbeta(n, a, b))
}
#t
t_sample <- function(n, df){
return(rt(n, df))
}
#Laplace
laplace_sample <- function(n){
return(rlaplace(n))
}
#Chi2
chi2_sample <- function(n, df){
return(rchisq(n, df))
}
#Gamma
gamma_sample <- function(n, shape, scale){
return(rgamma(n, shape = shape, scale = scale))
}
find_power <- function(test_fun, alpha, M = 10000){
crit <- normal_crit(test_fun, alpha)
test_name <- as.character(substitute(test_fun))
d <- 0
for(i in 1:M){
Z <- beta_sample(100, 2, 2)
D <- test_fun(Z)
if(test_name == 'sw'){
if(D < crit){
d <- d + 1
}
}
else{
if(D > crit){
d <- d + 1
}
}
}
p <- d
return(p)
}
find_power(sw, 0.05)
find_power <- function(test_fun, alpha, M = 10000){
crit <- normal_crit(test_fun, alpha)
test_name <- as.character(substitute(test_fun))
d <- 0
for(i in 1:M){
Z <- rbeta(100, 2, 2)
D <- test_fun(Z)
if(test_name == 'sw'){
if(D < crit){
d <- d + 1
}
}
else{
if(D > crit){
d <- d + 1
}
}
}
p <- d
return(p)
}
find_power <- function(test_fun, alpha, M = 10000){
crit <- normal_crit(test_fun, alpha)
test_name <- as.character(substitute(test_fun))
d <- 0
for(i in 1:M){
Z <- rbeta(100, 2, 2)
D <- test_fun(Z)
if(test_name == 'sw'){
if(D < crit){
d <- d + 1
}
}
else{
if(D > crit){
d <- d + 1
}
}
}
p <- d/M
return(p)
}
find_power(sw, 0.05)
find_power <- function(test_fun, alpha, M = 10000){
crit <- normal_crit(test_fun, alpha)
test_name <- as.character(substitute(test_fun))
d <- 0
for(i in 1:M){
Z <- rbeta(10, 2, 2)
D <- test_fun(Z)
if(test_name == 'sw'){
if(D < crit){
d <- d + 1
}
}
else{
if(D > crit){
d <- d + 1
}
}
}
p <- d/M
return(p)
}
find_power(sw, 0.05)
find_power(20, 2, 2)
find_power(ks, 0.05)
sw <- function(x){
return(shapiro.test(x)$statistic)
}
X <- replicate(N, rnorm(n, mean = 0, sd = 1))
dim(X) <- c(n, N)
T <- apply(X, 2, sw)
ecdf(T)
plot(exdf(T))
plot(ecdf(T))
T
sw <- function(x){
return(shapiro.test(x)$statistic)
}
X <- replicate(N = 50000, rnorm(n = 100, mean = 0, sd = 1))
dim(X) <- c(n, N)
T <- apply(X, 2, sw)
X <- replicate(N = 50000, rnorm(n = 100, mean = 0, sd = 1))
N = 50000
n = 100
X <- replicate(N, rnorm(n, mean = 0, sd = 1))
dim(X) <- c(n, N)
T <- apply(X, 2, sw)
plot(ecdf(T))
Y <- replicate(10000, rbeta(100, 2, 2))
dim(Y) <- c(100, 10000)
D <- apply(Y, 2, sw)
lines(ecdf(D))
lines(ecdf(D), col = 'red')
normal_crit(sw, 0.05)
find_power <- function(test_fun, alpha, M = 10000){
crit <- normal_crit(test_fun, alpha)
test_name <- as.character(substitute(test_fun))
d <- 0
for(i in 1:M){
Z <- rbeta(1000, 2, 2)
D <- test_fun(Z)
if(test_name == 'sw'){
if(D < crit){
d <- d + 1
}
}
else{
if(D > crit){
d <- d + 1
}
}
}
p <- d/M
return(p)
}
find_power(sw, 0.05)
plot(density(T)$x, density(T)$y)
plot(density(T)$x, density(T)$y, type = 'l')
lines(density(D)$x, density(D)$y,, col = 'red')
D
T
normal_crit(sw, 0.05)
Y <- replicate(10000, rbeta(1000, 2, 2))
dim(Y) <- c(100, 10000)
D <- apply(Y, 2, sw)
lines(density(D)$x, density(D)$y,, col = 'red')
Y <- replicate(10000, rbeta(1000, 2, 2))
dim(Y) <- c(1000, 10000)
D <- apply(Y, 2, sw)
lines(density(D)$x, density(D)$y,, col = 'red')
X <- replicate(N, rnorm(n, mean = 0, sd = 1))
dim(X) <- c(n, N)
T <- apply(X, 2, sw)
plot(density(T)$x, density(T)$y, type = 'l')
Y <- replicate(10000, rbeta(10, 2, 2))
dim(Y) <- c(10, 10000)
D <- apply(Y, 2, sw)
lines(density(D)$x, density(D)$y,, col = 'red')
find_power <- function(test_fun, alpha, M = 10000){
crit <- normal_crit(test_fun, alpha)
test_name <- as.character(substitute(test_fun))
d <- 0
for(i in 1:M){
Z <- rbeta(1000, 2, 2)
D <- test_fun(Z)
if(test_name == 'sw'){
if(D < crit){
d <- d + 1
}
}
else{
if(D > crit){
d <- d + 1
}
}
}
p <- d/M
return(p)
}
find_power(sw, 0.05)
find_power <- function(test_fun, alpha, M = 10000){
crit <- normal_crit(test_fun, alpha)
test_name <- as.character(substitute(test_fun))
d <- 0
for(i in 1:M){
Z <- rbeta(10, 2, 2)
D <- test_fun(Z)
if(test_name == 'sw'){
if(D < crit){
d <- d + 1
}
}
else{
if(D > crit){
d <- d + 1
}
}
}
p <- d/M
return(p)
}
find_power(sw, 0.05)
